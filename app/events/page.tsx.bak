"use client";

import { useState, useEffect, useMemo } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { useQuery } from "convex/react";
import { api } from "@/convex/_generated/api";
import { useInView } from "react-intersection-observer";
import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {
  Calendar,
  Search,
  ArrowRight,
  Vote,
  Award,
  Filter,
  X,
  Check,
  Users,
  Menu,
  Sparkles,
  Tag,
  Clock,
} from "lucide-react";

// Define a type for the event
interface Event {
  _id: string;
  name: string;
  description?: string;
  startDate: number;
  endDate: number;
  createdBy: string;
  createdAt: number;
  votePrice: number;
  organization?: string;
}

// Define event status types
type EventStatus = "all" | "upcoming" | "running" | "ended";

export default function EventsPage() {
  const router = useRouter();
  const [searchQuery, setSearchQuery] = useState("");
  const [statusFilter, setStatusFilter] = useState<EventStatus>("all");
  const [showFilters, setShowFilters] = useState(false);
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });

  // Animation variants
  const fadeInUp = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.6, ease: "easeOut" },
    },
  };

  const staggerContainer = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.2,
      },
    },
  };

  // For smooth parallax effect
  useEffect(() => {
    const handleMouseMove = (e) => {
      setMousePosition({
        x: e.clientX / window.innerWidth - 0.5,
        y: e.clientY / window.innerHeight - 0.5,
      });
    };

    window.addEventListener("mousemove", handleMouseMove);
    return () => window.removeEventListener("mousemove", handleMouseMove);
  }, []);

  // For scroll-based animations
  const [heroRef, heroInView] = useInView({
    triggerOnce: true,
    threshold: 0.1,
  });

  const [eventsRef, eventsInView] = useInView({
    triggerOnce: true,
    threshold: 0.1,
  });

  // Fetch all active events
  const activeEvents = useQuery(api.events.listActiveEvents) || [];

  // Determine event status
  const getEventStatus = (event: Event): EventStatus => {
    const now = Date.now();
    if (now > event.endDate) {
      return "ended";
    } else if (now >= event.startDate && now <= event.endDate) {
      return "running";
    } else {
      return "upcoming";
    }
  };

  // Create categorized events for UI display
  const categorizedEvents = useMemo(() => {
    return {
      upcoming: activeEvents.filter(
        (event) => getEventStatus(event) === "upcoming"
      ),
      running: activeEvents.filter(
        (event) => getEventStatus(event) === "running"
      ),
      ended: activeEvents.filter((event) => getEventStatus(event) === "ended"),
    };
  }, [activeEvents]);

  // Apply filters
  const filteredEvents = useMemo(() => {
    return activeEvents.filter((event) => {
      // Apply search filter
      const matchesSearch =
        event.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        (event.description || "")
          .toLowerCase()
          .includes(searchQuery.toLowerCase());

      // Apply status filter
      const eventStatus = getEventStatus(event);
      const matchesStatus =
        statusFilter === "all" || statusFilter === eventStatus;

      return matchesSearch && matchesStatus;
    });
  }, [activeEvents, searchQuery, statusFilter]);

  // Get counts for UI
  const eventCounts = useMemo(
    () => ({
      all: activeEvents.length,
      upcoming: categorizedEvents.upcoming.length,
      running: categorizedEvents.running.length,
      ended: categorizedEvents.ended.length,
    }),
    [activeEvents, categorizedEvents]
  );

  // Status badge style
  const getStatusBadgeStyle = (status: EventStatus) => {
    switch (status) {
      case "upcoming":
        return "bg-blue-100 text-blue-800 border-blue-200";
      case "running":
        return "bg-green-100 text-green-800 border-green-200";
      case "ended":
        return "bg-gray-100 text-gray-800 border-gray-200";
      default:
        return "bg-gray-100 text-gray-800 border-gray-200";
    }
  };

  // Status badge icon
  const getStatusIcon = (status: EventStatus) => {
    switch (status) {
      case "upcoming":
        return <Clock className="h-3 w-3 mr-1" />;
      case "running":
        return <Sparkles className="h-3 w-3 mr-1" />;
      case "ended":
        return <Check className="h-3 w-3 mr-1" />;
      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen flex flex-col">
      {/* Navbar */}
      <header className="border-b py-4 px-6 bg-white">
        <div className="container mx-auto flex justify-between items-center">
          <Link href="/" className="text-2xl font-bold flex items-center group">
            <motion.span
              className="bg-primary text-white p-1 rounded mr-1 relative overflow-hidden"
              whileHover={{ scale: 1.05 }}
              transition={{ type: "spring", stiffness: 400, damping: 10 }}
            >
              <span className="relative z-10">e</span>
              <motion.span
                className="absolute inset-0 bg-primary opacity-80"
                initial={{ x: "-100%" }}
                whileHover={{ x: "0%" }}
                transition={{ duration: 0.3 }}
              />
            </motion.span>
            <span className="group-hover:text-indigo-600 transition-colors">
              Vote
            </span>
          </Link>
          <div className="space-x-4">
            <Link href="/events">
              <Button variant="outline">Explore Events</Button>
            </Link>
            <Link href="/admin/login">
              <Button>Admin Login</Button>
            </Link>
          </div>
        </div>
      </header>

      {/* Main content */}
      <main className="flex-1 container mx-auto py-12 px-6">
        <div className="space-y-8">
          <div>
            <h1 className="text-3xl font-bold mb-4">All Voting Events</h1>
            <p className="text-lg text-gray-600 max-w-3xl">
              Browse voting events from various departments. Filter by upcoming,
              running, or ended events.
            </p>
          </div>

          {/* Search and filter bar */}
          <div className="flex flex-col md:flex-row gap-4">
            <Input
              placeholder="Search events..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="max-w-md"
            />
            <select
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value as EventStatus)}
              className="border rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary"
              aria-label="Filter events by status"
            >
              <option value="all">All Events</option>
              <option value="upcoming">Upcoming</option>
              <option value="running">Running</option>
              <option value="ended">Ended</option>
            </select>
          </div>

          {/* Events grid */}
          {filteredEvents.length === 0 ? (
            <div className="text-center py-16">
              <h3 className="text-xl font-medium text-gray-700 mb-2">
                No events found
              </h3>
              <p className="text-gray-500 mb-8 max-w-md mx-auto">
                {searchQuery || statusFilter !== "all"
                  ? "No events match your search criteria. Try different filters."
                  : "There are no active events at the moment. Please check back later."}
              </p>
              <Button
                onClick={() => {
                  setSearchQuery("");
                  setStatusFilter("all");
                }}
                variant="outline"
              >
                Clear Filters
              </Button>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {filteredEvents.map((event) => {
                const status = getEventStatus(event);
                return (
                  <Card key={event._id} className="flex flex-col h-full">
                    <CardHeader>
                      <div className="flex justify-between items-start">
                        <CardTitle className="line-clamp-2">
                          {event.name}
                        </CardTitle>
                        <div
                          className={`px-2 py-1 rounded text-xs ${getStatusBadgeStyle(status)}`}
                        >
                          {status === "upcoming"
                            ? "Upcoming"
                            : status === "running"
                              ? "Running"
                              : "Ended"}
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent className="flex-1">
                      <p className="text-sm text-gray-500 mb-4">
                        {new Date(event.startDate).toLocaleDateString()} -{" "}
                        {new Date(event.endDate).toLocaleDateString()}
                      </p>
                      <p className="text-sm mb-4 line-clamp-3">
                        {event.description ||
                          "Vote for your favorites in this event!"}
                      </p>
                      <div className="text-sm font-medium">
                        <span className="text-gray-500">Vote Price:</span> â‚µ
                        {event.votePrice.toFixed(2)}
                      </div>
                    </CardContent>
                    <CardFooter>
                      <Link href={`/events/${event._id}`} className="w-full">
                        <Button
                          className="w-full"
                          variant={status === "ended" ? "outline" : "default"}
                          disabled={status === "ended"}
                        >
                          {status === "ended" ? "Event Ended" : "View & Vote"}
                        </Button>
                      </Link>
                    </CardFooter>
                  </Card>
                );
              })}
            </div>
          )}
        </div>
      </main>

      {/* Footer */}
      <footer className="py-8 bg-gray-800 text-gray-300">
        <div className="container mx-auto px-6">
          <div className="flex flex-col md:flex-row justify-between items-center">
            <div className="mb-4 md:mb-0">
              <p className="text-sm">
                &copy; {new Date().getFullYear()} eVote Platform. All rights
                reserved.
              </p>
            </div>
            <div className="flex space-x-6">
              <Link href="/terms" className="text-sm hover:text-white">
                Terms of Service
              </Link>
              <Link href="/privacy" className="text-sm hover:text-white">
                Privacy Policy
              </Link>
              <Link href="/contact" className="text-sm hover:text-white">
                Contact Us
              </Link>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
}
